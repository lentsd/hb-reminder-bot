import 'source-map-support/register'
import { verbose } from 'sqlite3';
import TelegramBot from 'node-telegram-bot-api';
import { config } from 'dotenv';
import { scheduleJob } from 'node-schedule';

import { ChatsTable } from './db/db.tables/chats';
import { UsersTable } from './db/db.tables/users';
import { ChatsUsersTable } from './db/db.tables/chatsUsers';
import { DbErrorChecker } from './db/db.utils/dbErrorChecker';
import { convertDate } from './db/db.utils/convertDate';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã .env
config();

const sqlite3 = verbose();
const dbErrorChecker = new DbErrorChecker();

const db = new sqlite3.Database(
    'src/db/db.sqlite',
    sqlite3.OPEN_READWRITE,
    (err) => {

    if (err) {
        return console.error(err);
    }

    // –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É FK –≤ –±–¥
    db.run('PRAGMA foreign_keys=ON');
})

const chatsTable = new ChatsTable(db);
const usersTable = new UsersTable(db);
const chatsUsersTable = new ChatsUsersTable(db);

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –≤ –ë–î
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  chatsTable.addChat(chatId, (err) => {
    if (err) {
      if (dbErrorChecker.isAlreadyExist(err.message)) {
        bot.sendMessage(chatId, '–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_birthday.');
      }
    } else {
      bot.sendMessage(chatId, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —á–∞—Ç! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_birthday');
    }
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
bot.onText(/\/set_birthday/, async (msg) => {
  const chatId = msg.chat.id;
  const message = await bot.sendMessage(chatId, `–í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:

*username - DD.MM.YYYY*

–ù–∞–ø—Ä–∏–º–µ—Ä üëáüèº 

*ivan_petrov - 02.12.1998*`, 
{ parse_mode: 'Markdown' }
);

  const { message_id } = message;

  const replyListenerId = bot.onReplyToMessage(chatId, message_id, (msg) => {
    if (!msg.text) {
      return;
    }

    // –†–∞–∑–±–∏–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ "nickname ‚Äì birthday"
    const [nickname, birthday] = msg.text.split('-');

    usersTable.addUser(nickname.trim(), convertDate(birthday.trim()), (insertedId) => {
      chatsUsersTable.addUserChatRelation(insertedId, chatId);
    });

    bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω / –æ–±–Ω–æ–≤–ª–µ–Ω ü´°');
    bot.removeReplyListener(replyListenerId);
  })
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥—Ä –≤ —á–∞—Ç–µ
bot.onText(/\/get_birthdays/, (msg) => {
  const chatId = msg.chat.id;

  chatsUsersTable.getUsersInChat(chatId, (error, rows) => {
    const users = rows.reduce((acc, cur) => {
      acc += `${cur.nickname} - ${cur.birthday}\n`;

      return acc;
    }, '')

    bot.sendMessage(chatId, users);
  });
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∂–∏–≤–æ–π. –û—Å–æ–±—ã–π –∏—Ñ–∞—á–æ–∫ –¥–ª—è –í–æ–≤—ã.
bot.onText(/\/ping/, (msg) => {
  const chatId = msg.chat.id;

  if (msg.from?.username === 'kuratov_v') {
    bot.sendPhoto(chatId, 'https://i.ytimg.com/vi/mL6gk8pzKjs/maxresdefault.jpg');
  } else {
    bot.sendMessage(chatId, 'pong');
  }
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ —á–∞—Ç–∞
bot.onText(/\/get_chat_config/, (msg) => {
  const chatId = msg.chat.id;

  chatsTable.getChatConfig(chatId, (err, row) => {
    if (err) {
      return console.log('Error while getting chat config' + err);
    }

    bot.sendMessage(chatId, `
*üìù –í–∞—à —à–∞–±–ª–æ–Ω:*

${row.template}

*‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*

${row.timeToSend}`,
{ parse_mode: 'Markdown' })
  });
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
bot.onText(/\/set_template/, async (msg) => {
  const chatId = msg.chat.id;

  const { message_id } = await bot.sendMessage(chatId, `–í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:

*–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ {{nickname}}*`, 
  { parse_mode: 'Markdown' }
  );

  const replyListenerId = bot.onReplyToMessage(chatId, message_id, (msg) => {
    if (!msg.text) {
      return
    }

    chatsTable.setChatTemplate(chatId, msg.text, (err) => {
      if (err) {
        return console.log('Error while setting template' + err)
      }

      bot.sendMessage(chatId, '–®–∞–±–ª–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ü´°');
      bot.removeReplyListener(replyListenerId);
    })
  })
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–µ—Ç –≤—Ä–µ–º—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
bot.onText(/\/set_time/, async (msg) => {
  const chatId = msg.chat.id;

  const { message_id } = await bot.sendMessage(chatId, `–í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:

*HH:MM*

*–ù–∞–ø—Ä–∏–º–µ—Ä:*

12:00`, 
  { parse_mode: 'Markdown' }
  );

  const replyListenerId = bot.onReplyToMessage(chatId, message_id, (msg) => {
    if (!msg.text) {
      return
    }

    chatsTable.setChatTimeToSend(chatId, msg.text, (err) => {
      if (err) {
        return console.log('Error while setting time' + err)
      }

      bot.sendMessage(chatId, '–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ü´°');
      bot.removeReplyListener(replyListenerId);
    })
  })
});

function congratulateUsers() {
  chatsUsersTable.getUsersWithTodayBirthday((err, users) => {
    if (err) {
      return console.log('Error while congratulateUsers' + err);
    }

    users.forEach(user => {
      chatsUsersTable.getAllUserChats(user.id, (err, chats) => {
        chats.forEach((chat) => {
          chatsUsersTable.setUserCongrats(user.id, chat.id);
          bot.sendMessage(chat.id, chat.template.replace('{{nickname}}', `@${user.nickname}`))
        })
      })
    })
  });
}

// –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∫–æ–≥–æ –¥—Ä –∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º
scheduleJob('*/10 * * * *', () => {
  congratulateUsers();
})

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç